// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Widgets {
  id       Int    @id @default(autoincrement())
  position String @default("")
  type     String
  data     Json

  @@unique([position, type])
}

model God {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  image       String
  description String
  createdAt   DateTime           @default(now())
  temple      GodTempleMapping[]
  kathas      GodKathaMapping[]
  medias      MediaGodMapping[]
}

model Address {
  id             Int      @id @default(autoincrement())
  description    String
  address1       String
  address2       String
  district       String
  city           String
  state          String
  isCityCenter   Boolean
  isBusStation   Boolean
  isTrainStation Boolean
  isAirport      Boolean
  country        String
  latitude       String
  longitude      String
  zip            String
  createdAt      DateTime @default(now())
  temple         Temple[]
  event          Event[]
}

model Media {
  id         Int               @id @default(autoincrement())
  name       String
  entityId   Int
  media      String
  entityType String
  isVideo    Boolean
  isVisible  Boolean
  createdAt  DateTime          @default(now())
  gods       MediaGodMapping[]
  templeId   Int
  temple     Temple            @relation(fields: [templeId], references: [id])
}

model Temple {
  id             Int                @id @default(autoincrement())
  name           String
  description    String
  image          String
  addressId      Int
  address        Address?           @relation(fields: [addressId], references: [id])
  latitude       String
  longitude      String
  crowded        Json
  busyDays       Json
  darshanTimings String
  darshanTypes   Json
  gods           GodTempleMapping[]
  information    Json
  history        Json
  media          Media[]
  createdAt      DateTime           @default(now())
}

model GodTempleMapping {
  temple   Temple @relation(fields: [templeId], references: [id])
  templeId Int
  god      God    @relation(fields: [godId], references: [id])
  godId    Int

  @@id([godId, templeId])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String
  start       DateTime
  end         DateTime
  eventType   String
  locationId  Int
  location    Address? @relation(fields: [locationId], references: [id])
}

model Katha {
  id        Int               @id @default(autoincrement())
  title     String
  image     String
  type      String
  gods      GodKathaMapping[]
  content   Json              @default("[]")
  createdAt DateTime          @default(now())
}

model GodKathaMapping {
  god     God   @relation(fields: [godId], references: [id])
  godId   Int
  katha   Katha @relation(fields: [kathaId], references: [id])
  kathaId Int

  @@id([godId, kathaId])
}

model MediaGodMapping {
  media   Media @relation(fields: [mediaId], references: [id])
  mediaId Int
  god     God   @relation(fields: [godId], references: [id])
  godId   Int

  @@id([mediaId, godId])
}
